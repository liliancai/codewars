// class Solution {
//     public int[] prisonAfterNDays(int[] cells, int N) {
//        // n*6? the first and the last definite 0
//         int[] ans = new int[8];
//         for(int i=1; i<=N ;i++){
//             if(i==1){
//                 ans[0]=0;
//                 ans[7]=0;}
//             for(int j=1; j<7; j++)
//             {
//                 if(cells[j-1] == cells[j+1]) ans[j]=1;
//                 else ans[j]=0;
//             }
//               for(int j=0; j<8; j++)
//             {
//                 cells[j]=ans[j];
//             }
//              // if(i==1){
//              //    cells[0]=0;
//              //    cells[7]=0;}
//         }
//         return(ans);
//     }
// }

-------------------Let's figure out why time limit exceed---------------
class Solution {
    public int[] prisonAfterNDays(int[] cells, int N) {
		if(cells==null || cells.length==0 || N<=0) return cells;
        boolean hasCycle = false;
        int cycle = 0;
        HashSet<String> set = new HashSet<>(); 
        for(int i=0;i<N;i++){
            int[] next = nextDay(cells);
            String key = Arrays.toString(next);
            if(!set.contains(key)){ //store cell state
                set.add(key);
                cycle++;
            }
            else{ //hit a cycle
                hasCycle = true;
                break;
            }
            cells = next;
        }
        if(hasCycle){
            N%=cycle;
            for(int i=0;i<N;i++){
                cells = nextDay(cells);
            }   
        }
        return cells;
    }
    
    private int[] nextDay(int[] cells){
        int[] tmp = new int[cells.length];
        for(int i=1;i<cells.length-1;i++){
            tmp[i]=cells[i-1]==cells[i+1]?1:0;
        }
        return tmp;
    }
}
